#!/usr/bin/env bash
#
# Author Wayne E. Seguin
#

################################################################################
# Utility Functions
################################################################################
fail() { echo -e "\e[31mERROR:\e[0m $*" >&2 ; exit 1 ; }

debug() { [[ -z ${DEBUG:-} ]] || echo -e "\e[93mDEBUG\e[0m: $*" >&2 ; }

cmdinfo() { echo -e "\e[32m$*\e[0m" >&2; }

run() { cmdinfo "$*"; "$@"; }

################################################################################
# Script Functions
################################################################################
usage() {
  echo -e "Usage: ${0//*\/} type <cloud|cpi> env <name> region <name> iaas <name> [bosh <env>] [scale <dev|prod>] [vault-prefix <secret/...>] [dep <name>]" >&2
}

script::pwd() {
  (
    cd -P "$( dirname "${1}" )" &> /dev/null
    pwd
  )
}

script::path() {
  (
    local dir src="${BASH_SOURCE[0]:-$0}"
    while [[ -h "${src}" ]]
    do
      dir="$( script::pwd "${src}" )"
      src="$( readlink "${src}" )"
      [[ "${src%${src#?}}" == '/' ]] || src="${dir}/${src}"
    done
    script::pwd "${src}"
  )
}

scripts::path() {
  dirname "$( script::path )"
}

args::parse() {
  debug "${FUNCNAME[0]}: $*"

  local _action

  while [[ $# > 0 ]]
  do
    _action="${1}" ; shift
    case ${_action} in
      (kit) # Unused, but we won't error if it's given
        true
        shift || fail "${0//*/} ... kit <name>"
        ;;
      (type)
        export OCFP_CONFIG_TYPE="${1}"
        shift || fail "${0//*/} ... config <type>"
        ;;
      (env)
        export OCFP_ENV_NAME=${1//.yml}
        shift || fail "${0//*/} ... name <env-name> # ex: ocfp-codex-mgmt-us-east-1 / ocfp-codex-us-east-1"
        ;;
      (dep)
        deps+=( "${1//.yml}" )
        shift || fail "${0//*/} ... dep <env-name>"
        ;;
      (vault-prefix)
        export OCFP_VAULT_PREFIX="${1}" # override default of secret/
        shift || fail "${0//*/} ... vault-prefix \"secret/...\""
        ;;
      (region)
        export OCFP_REGION=$1 # ex: us-east-1, us-west-2
        shift || fail "${0//*/} ... region <region>"
        ;;
      (iaas)
        export OCFP_IAAS="$1"
        shift || fail "${0//*/} ... iaas <aws|azure|gcp|openstack|vsphere|warden>"
        case ${OCFP_IAAS} in
          #NOTE: Upstream are alicloud aws azure cloudstack docker gcp openstack softlayer vcloud virtualbox vsphere warden
          (aws|azure|gcp|openstack|vsphere|warden) true ;;
          (*) fail "Unsupported IAAS type: ${OCFP_IAAS}" ;;
        esac
        ;;
      (bosh)
        export OCFP_BOSH_ENV="$1"
        shift || fail "${0//*/} ... bosh <bosh-env-name>"
        ;;
      (scale)
        OCFP_ENV_SCALE="${1}"
        shift || fail "${0//*/} ... scale <type>"
        ;;
      (*)
        usage
        ;;
    esac
  done

  export OCFP_ENV_SCALE=${OCFP_ENV_SCALE:-"dev"}
  [[ -n ${OCFP_ENV_NAME} ]]    || fail "'env <name>' must be given"
  [[ -n ${OCFP_CONFIG_TYPE} ]] || fail "'type <cloud|cpi>' must be given"
  [[ -n ${OCFP_REGION} ]]      || fail "'region <region>' must be given"
  [[ -n ${OCFP_IAAS} ]]        || fail "'iaas <aws|gcp|azure>' must be given"

  set::env::type

  # All envs need to know their deployer/bosh_env, mgmt bosh is the exception
  [[ ${OCFP_ENV_TYPE} == "mgmt" ]] || [[ -n ${OCFP_BOSH_ENV} ]] ||
    fail "'bosh <bosh-env-name>' must be given"
}

set::env::type() {
  debug "${FUNCNAME[0]}: $*"

  case "${OCFP_ENV_NAME}" in
    (*-mgmt-*) OCFP_ENV_TYPE="mgmt" ;;
    (*)        OCFP_ENV_TYPE="ocf"  ;;
  esac
  export OCFP_ENV_TYPE
}

init::config::cloud() {
  debug "${FUNCNAME[0]}: $*"

  declare -a _merge
  local _config_path="${OCFP_SCRIPTS_PATH}/templates/configs/${OCFP_CONFIG_TYPE}/${OCFP_IAAS}"
  local _meta="${OCFP_SCRIPTS_PATH}/templates/configs/${OCFP_CONFIG_TYPE}/meta.yml"
  local _meta_prune="${OCFP_SCRIPTS_PATH}/templates/configs/meta-prune.yml"
  local _target="configs/${OCFP_CONFIG_TYPE}/${OCFP_ENV_NAME}.yml"

  echo -e "Generating ${OCFP_CONFIG_TYPE} Config File for ${OCFP_ENV_TYPE} env with scale ${OCFP_ENV_SCALE}...\n\t-> ${_target}"

  _tmp_path=$(mktemp -d 2>/dev/null || mktemp -d -t 'ocfp')

  _merge=(
    "${_meta}"
    "${OCFP_SCRIPTS_PATH}/templates/configs/cloud/meta/${OCFP_ENV_TYPE}.yml"
    "${_config_path}/scale/${OCFP_ENV_TYPE}.yml"
    "${_config_path}/${OCFP_ENV_TYPE}.yml"
  )

  for dep in "${deps[@]}"
  do
    _dep_env="${dep%%@*}" # vault mount override via @<vault-mount>
    ( # Subshell so as to not clobber parents env vars
      case ${dep} in
        (*\@*) _vault_prefix="${dep##*\@}" ;;
        (*)    _vault_prefix="${OCFP_VAULT_PREFIX}" ;;
      esac

      # Override vault paths for dependent env
      OCFP_VAULT_ENV_PATH="${_vault_prefix}/${_dep_env//-/\/}"
      OCFP_VAULT_TF_PATH="${_vault_prefix}/tf/${_dep_env//-/\/}"
      OCFP_ENV_NAME="${_dep_env}"
      OCFP_ENV_TYPE="ocf"
      VAULT_PREFIX="${_vault_prefix}"

      _m=(
      "${_meta}"
      "${OCFP_SCRIPTS_PATH}/templates/configs/cloud/meta/ocf.yml"
      "${_config_path}/azs/ocf.yml"
      "${_config_path}/networks/ocf-bosh.yml"
      "${_meta_prune}"
      )
      spruce merge -m "${_m[@]}" > "${_tmp_path}/${_dep_env}.yml"
    )
    _merge+=( "${_tmp_path}/${_dep_env}.yml" )
  done

  _merge+=( "${_meta_prune}")

  spruce merge -m "${_merge[@]}" > "${_target}"
}

init::config::cpi() {
  debug "${FUNCNAME[0]}: $*"

  declare -a _merge
  local _src_path _dst_path _tmp_path
  local _target="configs/${OCFP_CONFIG_TYPE}/${OCFP_ENV_NAME}.yml"
  local _config_path="${OCFP_SCRIPTS_PATH}/templates/configs/${OCFP_CONFIG_TYPE}"
  local _meta="${OCFP_SCRIPTS_PATH}/templates/configs/${OCFP_CONFIG_TYPE}/meta.yml"
  local _template="${_config_path}/${OCFP_ENV_TYPE}.yml"
  local _meta_prune="${OCFP_SCRIPTS_PATH}/templates/configs/meta-prune.yml"

  _src_path="${OCFP_VAULT_PREFIX}/iam/${OCFP_ENV_TYPE}"
  _dst_path="${OCFP_VAULT_ENV_PATH}/bosh"
  _tmp_path=$(mktemp -d 2>/dev/null || mktemp -d -t 'ocfp')

  _merge=( "${_meta}" "${_template}" )

  echo -e "Generating ${OCFP_CONFIG_TYPE} Config File for ${OCFP_ENV_TYPE} env with scale ${OCFP_ENV_SCALE}...\n\t-> ${_target}"

  for dep in "${deps[@]}"
  do
    _dep_env="${dep%%@*}" # vault mount override via @<vault-mount>
    ( # Subshell so as to not clobber parents env vars
      case ${dep} in
        (*\@*) _vault_prefix="${dep##*\@}" ;;
        (*)    _vault_prefix="${OCFP_VAULT_PREFIX}" ;;
      esac
      # Override vault paths for dependent env
      OCFP_VAULT_ENV_PATH="${_vault_prefix}/${_dep_env//-/\/}"
      OCFP_VAULT_TF_PATH="${_vault_prefix}/tf/${_dep_env//-/\/}"
      OCFP_ENV_NAME="${_dep_env}"
      VAULT_PREFIX="${_vault_prefix}"
      local _m=(
        "${_meta}"
        "${_config_path}/ocf.yml"
        "${_meta_prune}"
      )
      spruce merge -m "${_m[@]}" > "${_tmp_path}/${_dep_env}.yml"
    )
    _merge+=( "${_tmp_path}/${_dep_env}.yml" )
  done

  _merge+=( "${_meta_prune}")

  spruce merge -m "${_merge[@]}" > "${_target}"
}

set::vault::paths() {
  debug "${FUNCNAME[0]}: $*"

  local _env_path="${OCFP_ENV_NAME//-/\/}"

  export OCFP_VAULT_ENV_PATH="${OCFP_VAULT_PREFIX:-"/secret"}/${_env_path}"
  export OCFP_VAULT_TF_PATH="${OCFP_VAULT_PREFIX:-"/secret"}/tf/${_env_path}"
}

################################################################################
# Main
################################################################################

declare -x OCFP_CONFIG_TYPE OCFP_SCRIPTS_PATH OCFP_KIT OCFP_ENV_NAME OCFP_ENV_TYPE OCFP_ENV_SCALE OCFP_VAULT_PREFIX OCFP_VAULT_ENV_PATH OCFP_VAULT_TF_PATH

OCFP_KIT="bosh"

args::parse "$@"

set::vault::paths

OCFP_SCRIPTS_PATH=$(scripts::path)

mkdir -p "configs/${OCFP_CONFIG_TYPE}"

case ${OCFP_CONFIG_TYPE} in
  (cloud) init::config::cloud "$@" ;;
  (cpi)   init::config::cpi "$@" ;;
  (*)     fail "config type must be cloud or cpi not '${OCFP_CONFIG_TYPE}'" ;;
esac

exit $?
