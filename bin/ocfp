#!/usr/bin/env bash

# Author: Wayne E. Seguin

usage() {
  echo -e "$(cat <<EOT

USAGE

  ${0//*/} <cmd> <args>

WHERE <cmd> IN

  init pg     - Initializes pg database servers from vault data, updates env vault
  init env    - Generates a kit env file from template via vault data
  init config - Generates bosh config files for an env from templates via vault data

  init <asgs|bastion|domains|isosegs|tcp> - Initializes specific features
  test <c2c|blacksmith|nfs|smb|tcp>       - Tests specific features

WHERE init-{pg,env,config} <args> IN

  region <region> # Required (except test|init)
  kit <kit-name>  # Required, bosh, vault, jumpbox, cf, blacksmith, shield,
                              autoscaler, scheduler, concourse
  env <env-name> # Required, Ex: ocfp-demo-mgmt-us-east-1, ocfp-demo-us-east-1
  vault-prefix "secret/...." # Optional, overrides default 'secret/'

NOTES

  Templates are expected at the path:
    -> ${0#ocfp}.

  Default templates can be enhanced/replaced for environment specific context.

EOT
)"
exit 0
}

fail() { echo -e "$*" >&2 ; exit 1 ; }

debug() { [[ -z ${DEBUG:-} ]] || echo -e "\e[93mDEBUG\e[0m: $*" >&2 ; }

args::parse() {
  debug "${FUNCNAME[0]}: $*"

  local _action

  while [[ $# > 0 ]]
  do
    _action="${1}" ; shift
    case ${_action} in
      (dep)
        deps+=( "${1//.yml}" )
        shift || fail "${0//*/} ... dep <env-name>"
        ;;
      (vault-prefix)
        export OCFP_VAULT_PREFIX="${1}" # override default of secret/
        shift || fail "${0//*/} ... vault-prefix \"secret/...\""
        ;;
      (region)
        export OCFP_REGION=$1 # ex: us-east-1, us-west-2
        shift || fail "${0//*/} ... region <region>"
        ;;
      (kit)
        export OCFP_KIT=$1
        shift || fail "${0//*/} ... kit <name>"
        case ${OCFP_KIT} in
          (bosh|cf|blacksmith|shield|concourse|autoscaler|scheduler|vault|jumpbox|stratos) true ;;
          (*) fail "Unsupported kit: ${OCFP_KIT}" ;;
        esac
        ;;
      (env)
        export OCFP_ENV_NAME=${1//.yml}
        shift || fail "${0//*/} ... name <env-name> # ex: ocfp-codex-mgmt-us-east-1 / ocfp-codex-us-east-1"
        ;;
      (iaas)
        export OCFP_IAAS="$1"
        shift || fail "${0//*/} ... iaas <aws|azure|gcp|openstack|vsphere|warden>"
        case ${OCFP_IAAS} in
          #NOTE: Upstream are alicloud aws azure cloudstack docker gcp openstack softlayer vcloud virtualbox vsphere warden
          (aws|azure|gcp|openstack|vsphere|warden) true ;;
          (*) fail "Unsupported IAAS type: ${OCFP_IAAS}" ;;
        esac
        ;;
      (bosh)
        export OCFP_BOSH_ENV="$1"
        shift || fail "${0//*/} ... bosh <bosh-env-name>"
        ;;
      (type)
        config_type="${1}"
        shift || fail "${0//*/} ... config <type>"
        ;;
      (scale)
        config_scale="${1}"
        shift || fail "${0//*/} ... scale <type>"
        ;;
      (config|cloud|cpi|runtime|certs|pg|env|asgs|bastion|domains|isosegs|tcp) # Short circuit for init
        return 0
        ;;
      (c2c|blacksmith|nfs|smb|tcp) # Short circuit for tests.
        return 0
        ;;
      (*)
        usage
        ;;
    esac
  done

  [[ -n ${OCFP_ENV_NAME} ]] || fail "'env <name>' must be given"
  if [[ ${cmd} != "test" ]]
  then
    [[ -n ${OCFP_REGION} ]] || fail "'region <region>' must be given"
    [[ -n ${OCFP_KIT} ]]    || fail "'kit <name>' must be given"
  fi
}

safe::auth::check() {
  local status=$(safe auth status --json | jq -r '.valid')

  [[ ${status} == "true" ]] ||
    fail "safe auth status is not valid, please safe auth and try again."
}

set::vault::paths() {
  debug "${FUNCNAME[0]}: $*"
  local _env_path="${OCFP_ENV_NAME//-/\/}"
  export OCFP_VAULT_ENV_PATH="${OCFP_VAULT_PREFIX:-"/secret"}/${_env_path}"
  export OCFP_VAULT_TF_PATH="${OCFP_VAULT_PREFIX:-"/secret"}/tf/${_env_path}"
}

_test() {
  debug "${FUNCNAME[0]}: $*"

  case "$1" in
    (c2c|blacksmith|nfs|smb|tcp)
      bash "${scripts_path}/test/${1}" "${@:2}"
      ;;
    (*)
      fail "Usage: ${0//*\/} test {c2c}"
      ;;
  esac
}

init() {
  debug "${FUNCNAME[0]}: $*"

  case "$1" in
    (config|pg|env|asgs|bastion|domains|isosegs|tcp)
      bash "${scripts_path}/init/${1}" "${@:2}"
      ;;
    (*)
      fail "Usage: ${0//*\/} init asgs|bastion|domains|isosegs|tcp"
      ;;
  esac
}

[[ -n ${DEBUG:-} ]] && export DEBUG

scripts_path="$(dirname "${0}")"

cmd=$1 ; shift || usage

declare -a deps

args::parse "$@"

safe::auth::check

set::vault::paths # Sets vault paths for the main script level

if [[ -n ${VAULT_NAMESPACE} ]] ; then export VAULT_NAMESPACE ; fi
if [[ -n ${VAULT_VERSION} ]]   ; then export VAULT_VERSION ; fi

case ${cmd} in
  (test) _test "$@" ;;
  (init) init  "$@" ;;
  (*)    usage      ;;
esac

